# handlers/contact.py
from telegram import Update
from telegram.ext import ContextTypes
from keyboards import main_keyboard
from db import save_request, save_client_data, get_client_data
from ai_client import analyze_bankruptcy_case  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from states import CASE_DESCRIPTION, MAIN_MENU, CALENDAR_MAIN
from config import LAWYER_CHAT_ID, ADMIN_IDS
import datetime

async def handle_contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    is_booking = context.user_data.get('booking_in_progress', False)
    
    # –ü–∞—Ä—Å–∏–º –§–ò–û –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
    parts = text.split(',')
    if len(parts) != 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
            "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, +79991234567"
        )
        return CONTACT_INFO
    
    full_name = parts[0].strip()
    phone = parts[1].strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    phone_digits = ''.join(filter(str.isdigit, phone))
    if len(phone_digits) < 10:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å –∫–æ–¥–æ–º.\n"
            "–ü—Ä–∏–º–µ—Ä: +79991234567"
        )
        return CONTACT_INFO
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    user_id = update.effective_user.id
    username = update.effective_user.username or "no_username"
    
    context.user_data['full_name'] = full_name
    context.user_data['phone'] = phone
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_client_data(user_id, {
        'username': username,
        'full_name': full_name,
        'phone': phone
    })
    
    if is_booking:
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
        context.user_data['client_data'] = {
            'full_name': full_name,
            'phone': phone
        }
        context.user_data['booking_in_progress'] = False
        
        from keyboards import create_calendar
        current_date = datetime.date.today()
        
        await update.message.reply_text(
            f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
            f"üë§ {full_name}\n"
            f"üì± {phone}\n\n"
            f"üìÖ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:",
            reply_markup=create_calendar(current_date.year, current_date.month)
        )
        return CALENDAR_MAIN
    else:
        # –û–±—ã—á–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        await update.message.reply_text(
            "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n"
            "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é:\n"
            "‚Ä¢ –ö–∞–∫–∏–µ –¥–æ–ª–≥–∏ —É –≤–∞—Å –µ—Å—Ç—å? (–±–∞–Ω–∫–∏, –ú–§–û, –ñ–ö–• –∏ —Ç.–¥.)\n"
            "‚Ä¢ –ï—Å—Ç—å –ª–∏ –∏–º—É—â–µ—Å—Ç–≤–æ?\n"
            "‚Ä¢ –ï—Å—Ç—å –ª–∏ —Å—É–¥–µ–±–Ω—ã–µ –ø—Ä–∏—Å—Ç–∞–≤—ã?\n"
            "‚Ä¢ –ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç?\n\n"
            "–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—Ç–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è."
        )
        return CASE_DESCRIPTION

async def handle_case_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞."""
    description = update.message.text
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_id = update.effective_user.id
    username = update.effective_user.username or "no_username"
    full_name = context.user_data.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    phone = context.user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
    debt_amount = context.user_data.get('debt_amount', 0)
    income = context.user_data.get('income', 0)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    context.user_data['case_description'] = description
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    save_client_data(user_id, {
        'case_description': description,
        'debt_amount': debt_amount,
        'income': income
    })
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–µ–π—Å —Å –ø–æ–º–æ—â—å—é –ò–ò
    processing_msg = await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é...")
    
    try:
        ai_analysis = await analyze_bankruptcy_case(debt_amount, income, description)
    except Exception as e:
        ai_analysis = f"–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}"
    
    await processing_msg.delete()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    from db import save_request
    request_id = save_request(
        user_id=user_id,
        username=username,
        full_name=full_name,
        phone=phone,
        debt_amount=debt_amount,
        income=income,
        case_description=description,
        ai_analysis=ai_analysis
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await update.message.reply_text(
        f"‚úÖ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –ø—Ä–∏–Ω—è—Ç–∞!**\n\n"
        f"üìä **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:**\n{ai_analysis[:1000]}...\n\n"
        f"üìû –ù–∞—à —é—Ä–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É {phone}\n\n"
        f"–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é 'üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é'",
        reply_markup=main_keyboard(),
        parse_mode="Markdown"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —é—Ä–∏—Å—Ç—É
    lawyer_message = (
        f"üÜï **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}**\n\n"
        f"üë§ **–ö–ª–∏–µ–Ω—Ç:** {full_name}\n"
        f"üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** `{phone}`\n"
        f"üí¨ **Username:** @{username}\n"
        f"üí∞ **–°—É–º–º–∞ –¥–æ–ª–≥–∞:** {debt_amount:,} —Ä—É–±\n"
        f"üíµ **–î–æ—Ö–æ–¥:** {income:,} —Ä—É–±\n\n"
        f"üìù **–°–∏—Ç—É–∞—Ü–∏—è:**\n{description[:500]}...\n\n"
        f"ü§ñ **–ò–ò-–∞–Ω–∞–ª–∏–∑:**\n{ai_analysis[:500]}...\n\n"
        f"üîó [–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å](tg://user?id={user_id})"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=lawyer_message,
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    return MAIN_MENU

import datetime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
from keyboards import create_calendar, main_keyboard, create_time_slots_keyboard_with_status
from db import get_lawyer_schedule, get_appointments_for_date, save_appointment, get_client_data, save_client_data, get_booked_times_for_date, check_appointment_time_available
from states import CALENDAR_MAIN, CALENDAR_SELECT_TIME, MAIN_MENU, CONTACT_INFO
from config import LAWYER_CHAT_ID, ADMIN_IDS

async def cancel_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    await query.edit_message_text(
        "‚ùå –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
    )
    
    await query.message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_keyboard()
    )
    
    context.user_data.clear()
    return MAIN_MENU

async def back_to_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã."""
    query = update.callback_query
    await query.answer()
    
    current_date = datetime.date.today()
    await query.edit_message_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:",
        reply_markup=create_calendar(current_date.year, current_date.month)
    )
    
    return CALENDAR_MAIN

async def start_booking_process(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞."""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —é—Ä–∏—Å—Ç–∞
    schedule = get_lawyer_schedule()
    if not schedule:
        await update.message.reply_text(
            "‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —é—Ä–∏—Å—Ç–∞ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.",
            reply_markup=main_keyboard()
        )
        return MAIN_MENU
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    client_data = get_client_data(user_id)
    
    if not client_data or not client_data.get('full_name') or not client_data.get('phone'):
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Ö
        await update.message.reply_text(
            "üìù **–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –Ω—É–∂–Ω—ã –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –∏ —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
            "–ü—Ä–∏–º–µ—Ä: _–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, +79991234567_\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
            parse_mode="Markdown"
        )
        context.user_data['booking_in_progress'] = True
        return CONTACT_INFO
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        await update.message.reply_text(
            f"‚úÖ **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**\n"
            f"üë§ {client_data['full_name']}\n"
            f"üì± {client_data['phone']}\n\n"
            f"–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã, —Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º'\n\n"
            f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:",
            reply_markup=create_calendar(datetime.date.today().year, datetime.date.today().month),
            parse_mode="Markdown"
        )
        context.user_data['client_data'] = client_data
        return CALENDAR_MAIN

async def handle_calendar_nav(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é (–∫–Ω–æ–ø–∫–∏ << –∏ >>)."""
    query = update.callback_query
    await query.answer()
    
    try:
        _, year, month = query.data.split('_')
        year = int(year)
        month = int(month)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç–∞–º–∏ –Ω–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 3 –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥
        max_date = datetime.date.today() + datetime.timedelta(days=90)
        selected_date = datetime.date(year, month, 1)
        
        if selected_date > max_date:
            await query.answer("–ó–∞–ø–∏—Å—å –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 3 –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥", show_alert=True)
            return CALENDAR_MAIN
        
        await query.edit_message_text(
            f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:",
            reply_markup=create_calendar(year, month)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_calendar_nav: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    return CALENDAR_MAIN

async def handle_day_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è."""
    query = update.callback_query
    await query.answer()
    
    try:
        date_str = query.data.replace('calendar_day_', '')
        selected_date = datetime.date.fromisoformat(date_str)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if selected_date < datetime.date.today():
            await query.answer("–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É", show_alert=True)
            return CALENDAR_MAIN
        
        context.user_data['selected_date'] = date_str
        
        weekday_map = {
            0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 1: '–í—Ç–æ—Ä–Ω–∏–∫', 2: '–°—Ä–µ–¥–∞', 
            3: '–ß–µ—Ç–≤–µ—Ä–≥', 4: '–ü—è—Ç–Ω–∏—Ü–∞', 5: '–°—É–±–±–æ—Ç–∞', 6: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }
        
        selected_weekday = weekday_map.get(selected_date.weekday())
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —é—Ä–∏—Å—Ç–∞
        schedule = get_lawyer_schedule()
        
        working_hours = None
        for entry in schedule:
            if entry[0] == selected_weekday:
                working_hours = (entry[1], entry[2])
                break
        
        if not working_hours:
            await query.answer(
                f"–í {selected_weekday.lower()} —é—Ä–∏—Å—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å.",
                show_alert=True
            )
            return CALENDAR_MAIN
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
        start_hour, start_minute = map(int, working_hours[0].split(':'))
        end_hour, end_minute = map(int, working_hours[1].split(':'))
        
        start = datetime.datetime.combine(selected_date, datetime.time(start_hour, start_minute))
        end = datetime.datetime.combine(selected_date, datetime.time(end_hour, end_minute))
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ + 1 —á–∞—Å
        if selected_date == datetime.date.today():
            min_start = datetime.datetime.now() + datetime.timedelta(hours=1)
            if min_start > start:
                minutes = min_start.minute
                if minutes < 30:
                    min_start = min_start.replace(minute=30, second=0, microsecond=0)
                else:
                    min_start = (min_start + datetime.timedelta(hours=1)).replace(minute=0, second=0, microsecond=0)
                start = max(start, min_start)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –≤—Ä–µ–º–µ–Ω
        booked_times = get_booked_times_for_date(selected_date)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã (–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ, –∏ –∑–∞–Ω—è—Ç—ã–µ)
        all_slots = []
        current = start
        while current < end:
            all_slots.append(current.strftime('%H:%M'))
            current += datetime.timedelta(minutes=30)
        
        if not all_slots:
            await query.edit_message_text(
                f"‚ùå –ù–∞ {selected_date.strftime('%d.%m.%Y')} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.",
                reply_markup=create_calendar(selected_date.year, selected_date.month)
            )
            return CALENDAR_MAIN
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
        free_slots_count = len([s for s in all_slots if s not in booked_times])
        
        status_text = (
            f"üïê **–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ {selected_date.strftime('%d.%m.%Y')}**\n"
            f"üìä –°–≤–æ–±–æ–¥–Ω–æ: {free_slots_count} –∏–∑ {len(all_slots)} —Å–ª–æ—Ç–æ–≤\n\n"
            f"‚úÖ - —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è\n"
            f"‚ùå - –∑–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 12 —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        displayed_slots = all_slots[:12] if len(all_slots) > 12 else all_slots
        
        await query.edit_message_text(
            status_text,
            reply_markup=create_time_slots_keyboard_with_status(displayed_slots, booked_times),
            parse_mode="Markdown"
        )
        
        return CALENDAR_SELECT_TIME
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_day_selection: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return CALENDAR_MAIN

async def handle_time_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å."""
    query = update.callback_query
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª–∏ –ª–∏ –Ω–∞ –∑–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è
    if query.data.startswith('occupied_'):
        await query.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.", show_alert=True)
        return CALENDAR_SELECT_TIME
    
    await query.answer()
    
    try:
        time_str = query.data.replace('time_slot_', '')
        date_str = context.user_data.get('selected_date')
        
        if not date_str:
            await query.answer("–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=main_keyboard()
            )
            return MAIN_MENU
        
        # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
        selected_date = datetime.date.fromisoformat(date_str)
        if not check_appointment_time_available(selected_date, time_str):
            await query.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.", show_alert=True)
            return CALENDAR_SELECT_TIME
        
        appointment_datetime_str = f"{date_str}T{time_str}:00"
        appointment_datetime = datetime.datetime.fromisoformat(appointment_datetime_str)
        
        user = update.effective_user
        user_id = user.id
        username = user.username or "no_username"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        client_data = context.user_data.get('client_data') or get_client_data(user_id)
        
        if not client_data:
            await query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return MAIN_MENU
        
        full_name = client_data.get('full_name', user.full_name)
        phone = client_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_appointment(user_id, username, full_name, phone, appointment_datetime_str)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        formatted_date = appointment_datetime.strftime('%d.%m.%Y')
        formatted_time = appointment_datetime.strftime('%H:%M')
        weekday_ru = {
            0: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 1: '–≤—Ç–æ—Ä–Ω–∏–∫', 2: '—Å—Ä–µ–¥–∞', 
            3: '—á–µ—Ç–≤–µ—Ä–≥', 4: '–ø—è—Ç–Ω–∏—Ü–∞', 5: '—Å—É–±–±–æ—Ç–∞', 6: '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }
        weekday = weekday_ru[appointment_datetime.weekday()]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        success_message = (
            f"‚úÖ **–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!**\n\n"
            f"üë§ **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**\n"
            f"‚Ä¢ –§–ò–û: {full_name}\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
            f"üìÖ **–î–∞—Ç–∞:** {formatted_date} ({weekday})\n"
            f"üïê **–í—Ä–µ–º—è:** {formatted_time}\n"
            f"‚è± **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** 30 –º–∏–Ω—É—Ç\n\n"
        )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–ª–≥–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
        if client_data.get('debt_amount'):
            success_message += f"üí∞ **–°—É–º–º–∞ –¥–æ–ª–≥–∞:** {client_data['debt_amount']:,} —Ä—É–±.\n"
        if client_data.get('case_description'):
            success_message += f"üìù **–°–∏—Ç—É–∞—Ü–∏—è:** {client_data['case_description'][:100]}...\n"
        
        success_message += (
            "\nüí° –ó–∞ –¥–µ–Ω—å –¥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n"
            "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è –º–µ–Ω—é –Ω–∏–∂–µ."
        )
        
        await query.edit_message_text(success_message, parse_mode="Markdown")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
        await query.message.reply_text(
            "–ß–µ–º –µ—â–µ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?",
            reply_markup=main_keyboard()
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
        lawyer_message = (
            f"üì¢ **–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!**\n\n"
            f"üë§ **–ö–ª–∏–µ–Ω—Ç:** {full_name}\n"
            f"üì± **Username:** @{username}\n"
            f"üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {phone}\n"
            f"üìÖ **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** {formatted_date} –≤ {formatted_time}\n"
        )
        
        if client_data.get('debt_amount'):
            lawyer_message += f"üí∞ **–î–æ–ª–≥:** {client_data['debt_amount']:,} —Ä—É–±.\n"
        if client_data.get('case_description'):
            lawyer_message += f"üìù **–°–∏—Ç—É–∞—Ü–∏—è:** {client_data['case_description'][:200]}...\n"
        
        lawyer_message += f"\nüîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å:** [–û—Ç–∫—Ä—ã—Ç—å](tg://user?id={user_id})"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        if hasattr(ADMIN_IDS, '__iter__'):
            for admin_id in ADMIN_IDS:
                if admin_id:
                    try:
                        await context.bot.send_message(
                            chat_id=admin_id,
                            text=lawyer_message,
                            parse_mode="Markdown"
                        )
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('selected_date', None)
        context.user_data.pop('client_data', None)
        
        return MAIN_MENU
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_time_selection: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=main_keyboard()
        )
        return MAIN_MENU

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import datetime
from db import (
    get_all_requests, 
    get_request_details, 
    update_request_status, 
    save_lawyer_schedule,
    get_appointments_for_date,
    get_statistics,
    save_document_analysis
)
from states import (
    ADMIN_PANEL, SETTING_SCHEDULE, MAIN_MENU,
    ADMIN_DOCUMENTS, ADMIN_CONTRACT, ADMIN_RESEARCH, 
    ADMIN_RISK_ANALYSIS, ADMIN_FINANCIAL
)
from config import ADMIN_IDS
from ai_client import (
    analyze_document_with_ai,
    generate_contract_with_ai,
    legal_research_with_ai,
    analyze_risks_with_ai,
    analyze_financial_documents
)

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    user_id_str = str(user_id)
    result = user_id_str in ADMIN_IDS
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞: user_id={user_id}, type={type(user_id)}, ADMIN_IDS={ADMIN_IDS}, result={result}")
    return result

def admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å –ò–ò-—Ñ—É–Ω–∫—Ü–∏—è–º–∏."""
    keyboard = [
        ["üìã –ó–∞—è–≤–∫–∏", "üìÖ –ó–∞–ø–∏—Å–∏"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìù –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"],
        ["üìÑ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "‚úçÔ∏è –°–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä"],
        ["üîç –ü–æ–∏—Å–∫ –ø—Ä–∞–∫—Ç–∏–∫–∏", "‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤"],
        ["üíº –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", "üîê –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"],
        ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é."""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.\n"
            "–í–∞—à ID: " + str(user_id)
        )
        return MAIN_MENU
    
    await update.message.reply_text(
        "üîê **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏\n"
        "‚Ä¢ üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
        "‚Ä¢ ü§ñ –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_keyboard(),
        parse_mode="Markdown"
    )
    
    return ADMIN_PANEL

async def handle_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞."""
    text = update.message.text
    
    if text == "üìã –ó–∞—è–≤–∫–∏":
        return await handle_admin_requests(update, context)
    elif text == "üìÖ –ó–∞–ø–∏—Å–∏":
        return await show_appointments(update, context)
    elif text == "üìù –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        return await start_set_schedule(update, context)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await show_statistics(update, context)
    elif text == "üìÑ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤":
        return await start_document_analysis(update, context)
    elif text == "‚úçÔ∏è –°–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä":
        return await start_contract_generation(update, context)
    elif text == "üîç –ü–æ–∏—Å–∫ –ø—Ä–∞–∫—Ç–∏–∫–∏":
        return await start_legal_research(update, context)
    elif text == "‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤":
        return await start_risk_analysis(update, context)
    elif text == "üíº –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑":
        return await start_financial_analysis(update, context)
    elif text == "üîê –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö":
        return await data_protection_info(update, context)
    elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        from handlers.start import start
        return await start(update, context)
    
    return ADMIN_PANEL

async def handle_admin_requests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    if not is_admin(update.effective_user.id):
        return MAIN_MENU
    
    requests = get_all_requests()
    
    if not requests:
        await update.message.reply_text(
            "üìã –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=admin_keyboard()
        )
        return ADMIN_PANEL
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞—è–≤–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    new_requests = [r for r in requests if r[9] == 'new']
    in_progress = [r for r in requests if r[9] == 'in_progress']
    completed = [r for r in requests if r[9] == 'completed']
    
    message = "üìã **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–Ø–í–ö–ê–ú–ò**\n\n"
    
    if new_requests:
        message += "üÜï **–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏:**\n"
        for req in new_requests[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
            date = datetime.datetime.fromisoformat(req[8]).strftime("%d.%m %H:%M")
            message += f"‚Ä¢ ID{req[0]}: {req[3]} ({date})\n"
    
    if in_progress:
        message += "\n‚è≥ **–í —Ä–∞–±–æ—Ç–µ:**\n"
        for req in in_progress[:5]:
            date = datetime.datetime.fromisoformat(req[8]).strftime("%d.%m %H:%M")
            message += f"‚Ä¢ ID{req[0]}: {req[3]} ({date})\n"
    
    if completed:
        message += "\n‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ:**\n"
        for req in completed[:3]:
            date = datetime.datetime.fromisoformat(req[8]).strftime("%d.%m %H:%M")
            message += f"‚Ä¢ ID{req[0]}: {req[3]} ({date})\n"
    
    message += "\nüìå –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –µ—ë ID:"
    
    await update.message.reply_text(
        message,
        parse_mode="Markdown",
        reply_markup=admin_keyboard()
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
    if new_requests:
        keyboard = []
        for i in range(0, len(new_requests[:10]), 2):  # –ú–∞–∫—Å–∏–º—É–º 10 –∑–∞—è–≤–æ–∫
            row = []
            row.append(InlineKeyboardButton(
                f"üìã ID{new_requests[i][0]}", 
                callback_data=f"view_request_{new_requests[i][0]}"
            ))
            if i + 1 < len(new_requests[:10]):
                row.append(InlineKeyboardButton(
                    f"üìã ID{new_requests[i+1][0]}", 
                    callback_data=f"view_request_{new_requests[i+1][0]}"
                ))
            keyboard.append(row)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=reply_markup
        )
    
    return ADMIN_PANEL

async def handle_status_change(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π."""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏
    if data.startswith("view_request_"):
        request_id = int(data.replace("view_request_", ""))
        request = get_request_details(request_id)
        
        if request:
            status_emoji = {
                'new': 'üÜï',
                'in_progress': '‚è≥',
                'completed': '‚úÖ'
            }
            
            status_text = {
                'new': '–ù–æ–≤–∞—è',
                'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
                'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
            }
            
            created_at = datetime.datetime.fromisoformat(request[8])
            
            message = f"""
üìã **–ó–ê–Ø–í–ö–ê #{request[0]}**

üë§ **–ö–ª–∏–µ–Ω—Ç:** {request[3]}
üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {request[4]}
üí¨ **Username:** @{request[2] if request[2] else '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üí∞ **–°—É–º–º–∞ –¥–æ–ª–≥–∞:** {request[5]:,.0f} —Ä—É–±.
üíµ **–î–æ—Ö–æ–¥:** {request[6]:,.0f} —Ä—É–±.

üìù **–û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏:**
{request[7]}

ü§ñ **–ê–Ω–∞–ª–∏–∑ –ò–ò:**
{request[10] if request[10] else '–ù–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è'}

üìÖ **–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:** {created_at.strftime('%d.%m.%Y %H:%M')}
{status_emoji.get(request[9], '')} **–°—Ç–∞—Ç—É—Å:** {status_text.get(request[9], request[9])}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:
"""
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            keyboard = [
                [
                    InlineKeyboardButton("üÜï –ù–æ–≤–∞—è", callback_data=f"status_new_{request_id}"),
                    InlineKeyboardButton("‚è≥ –í —Ä–∞–±–æ—Ç–µ", callback_data=f"status_in_progress_{request_id}")
                ],
                [
                    InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞", callback_data=f"status_completed_{request_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
    
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    elif data.startswith("status_"):
        parts = data.split("_")
        new_status = "_".join(parts[1:-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å (–º–æ–∂–µ—Ç –±—ã—Ç—å in_progress)
        request_id = int(parts[-1])
        
        update_request_status(request_id, new_status)
        
        status_text = {
            'new': '–ù–æ–≤–∞—è',
            'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
        }
        
        await query.edit_message_text(
            f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_text.get(new_status, new_status)}"
        )
    
    return ADMIN_PANEL

async def show_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."""
    if not is_admin(update.effective_user.id):
        return MAIN_MENU
    
    today = datetime.date.today()
    tomorrow = today + datetime.timedelta(days=1)
    week_ahead = today + datetime.timedelta(days=7)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏
    today_appointments = get_appointments_for_date(today)
    tomorrow_appointments = get_appointments_for_date(tomorrow)
    
    message = "üìÖ **–ó–ê–ü–ò–°–ò –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò**\n\n"
    
    # –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    if today_appointments:
        message += f"**–°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}):**\n"
        for app in today_appointments:
            time = datetime.datetime.fromisoformat(app[5]).strftime("%H:%M")
            status = "‚úÖ" if app[7] == 'scheduled' else "‚ùå"
            message += f"{status} {time} - {app[3]} ({app[4]})\n"
        message += "\n"
    else:
        message += f"–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.\n\n"
    
    # –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    if tomorrow_appointments:
        message += f"**–ó–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m.%Y')}):**\n"
        for app in tomorrow_appointments:
            time = datetime.datetime.fromisoformat(app[5]).strftime("%H:%M")
            status = "‚úÖ" if app[7] == 'scheduled' else "‚ùå"
            message += f"{status} {time} - {app[3]} ({app[4]})\n"
        message += "\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é
    week_count = 0
    current_date = today
    while current_date <= week_ahead:
        week_count += len(get_appointments_for_date(current_date))
        current_date += datetime.timedelta(days=1)
    
    message += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    message += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –Ω–µ–¥–µ–ª—é: {week_count}\n"
    
    await update.message.reply_text(
        message,
        parse_mode="Markdown",
        reply_markup=admin_keyboard()
    )
    
    return ADMIN_PANEL

async def start_set_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    if not is_admin(update.effective_user.id):
        return MAIN_MENU
    
    await update.message.reply_text(
        "üìù **–ù–ê–°–¢–†–û–ô–ö–ê –†–ê–°–ü–ò–°–ê–ù–ò–Ø**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "```\n"
        "–ü–Ω: 09:00-18:00\n"
        "–í—Ç: 09:00-18:00\n"
        "–°—Ä: 09:00-18:00\n"
        "–ß—Ç: 09:00-18:00\n"
        "–ü—Ç: 09:00-17:00\n"
        "–°–±: –≤—ã—Ö–æ–¥–Ω–æ–π\n"
        "–í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π\n"
        "```\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '—Å—Ç–∞–Ω–¥–∞—Ä—Ç' –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ü–Ω-–ü—Ç 09:00-18:00\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove()
    )
    
    return SETTING_SCHEDULE

async def handle_schedule_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    text = update.message.text.strip().lower()
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    if text == "—Å—Ç–∞–Ω–¥–∞—Ä—Ç":
        schedule = [
            ("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "09:00", "18:00"),
            ("–í—Ç–æ—Ä–Ω–∏–∫", "09:00", "18:00"),
            ("–°—Ä–µ–¥–∞", "09:00", "18:00"),
            ("–ß–µ—Ç–≤–µ—Ä–≥", "09:00", "18:00"),
            ("–ü—è—Ç–Ω–∏—Ü–∞", "09:00", "18:00"),
            ("–°—É–±–±–æ—Ç–∞", "–≤—ã—Ö–æ–¥–Ω–æ–π", "–≤—ã—Ö–æ–¥–Ω–æ–π"),
            ("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–≤—ã—Ö–æ–¥–Ω–æ–π", "–≤—ã—Ö–æ–¥–Ω–æ–π")
        ]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏
        working_schedule = [(day, start, end) for day, start, end in schedule if start != "–≤—ã—Ö–æ–¥–Ω–æ–π"]
        
        save_lawyer_schedule(working_schedule)
        
        await update.message.reply_text(
            "‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:\n"
            "–ü–Ω-–ü—Ç: 09:00-18:00\n"
            "–°–±-–í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π",
            reply_markup=admin_keyboard()
        )
    else:
        # –ü–∞—Ä—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        lines = text.split('\n')
        schedule = []
        
        days_map = {
            '–ø–Ω': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            '–≤—Ç': '–í—Ç–æ—Ä–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫': '–í—Ç–æ—Ä–Ω–∏–∫',
            '—Å—Ä': '–°—Ä–µ–¥–∞', '—Å—Ä–µ–¥–∞': '–°—Ä–µ–¥–∞',
            '—á—Ç': '–ß–µ—Ç–≤–µ—Ä–≥', '—á–µ—Ç–≤–µ—Ä–≥': '–ß–µ—Ç–≤–µ—Ä–≥',
            '–ø—Ç': '–ü—è—Ç–Ω–∏—Ü–∞', '–ø—è—Ç–Ω–∏—Ü–∞': '–ü—è—Ç–Ω–∏—Ü–∞',
            '—Å–±': '–°—É–±–±–æ—Ç–∞', '—Å—É–±–±–æ—Ç–∞': '–°—É–±–±–æ—Ç–∞',
            '–≤—Å': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }
        
        success = True
        for line in lines:
            line = line.strip().lower()
            if not line:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ "–≤—ã—Ö–æ–¥–Ω–æ–π"
            if "–≤—ã—Ö–æ–¥–Ω–æ–π" in line:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏
                continue
            
            # –ü–∞—Ä—Å–∏–º —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏
            parts = line.replace(':', ' ').replace('-', ' ').replace('‚Äî', ' ').split()
            
            day = None
            start_time = None
            end_time = None
            
            # –ù–∞—Ö–æ–¥–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            for part in parts:
                if part in days_map:
                    day = days_map[part]
                    break
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º–µ–Ω–∞
            times = []
            for i, part in enumerate(parts):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú
                if len(part) == 5 and part[2] == ':':
                    times.append(part)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ß–ß–ú–ú
                elif len(part) == 4 and part.isdigit():
                    times.append(f"{part[:2]}:{part[2:]}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–∞–≤–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç (09 00)
                elif i < len(parts) - 1 and part.isdigit() and parts[i+1].isdigit():
                    if len(part) == 2 and len(parts[i+1]) == 2:
                        times.append(f"{part}:{parts[i+1]}")
            
            if day and len(times) >= 2:
                schedule.append((day, times[0], times[1]))
            else:
                success = False
                break
        
        if success and schedule:
            save_lawyer_schedule(schedule)
            
            schedule_text = "\n".join([f"{day}: {start}-{end}" for day, start, end in schedule])
            await update.message.reply_text(
                f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n\n{schedule_text}",
                reply_markup=admin_keyboard()
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '—Å—Ç–∞–Ω–¥–∞—Ä—Ç'.\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
                "–ü–Ω: 09:00-18:00\n"
                "–í—Ç: 10:00-19:00\n"
                "–°–±: –≤—ã—Ö–æ–¥–Ω–æ–π",
                reply_markup=admin_keyboard()
            )
            return SETTING_SCHEDULE
    
    return ADMIN_PANEL

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    if not is_admin(update.effective_user.id):
        return MAIN_MENU
    
    stats = get_statistics()
    
    message = f"""
üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´**

**üìã –ó–∞—è–≤–∫–∏:**
‚Ä¢ –í—Å–µ–≥–æ: {stats['total_requests']}
‚Ä¢ –ù–æ–≤—ã–µ: {stats['new_requests']}
‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω—ã: {stats['completed']}

**üìÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:**
‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {stats['scheduled']}
‚Ä¢ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ: {stats['completed_appointments']}

**üë• –ö–ª–∏–µ–Ω—Ç—ã:**
‚Ä¢ –í—Å–µ–≥–æ: {stats['total_clients']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ (30 –¥–Ω–µ–π): {stats['active_clients']}

**üí∞ –§–∏–Ω–∞–Ω—Å—ã:**
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–æ–≤: {stats['total_debt']:,.0f} —Ä—É–±
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –¥–æ–ª–≥: {stats['avg_debt']:,.0f} —Ä—É–±
‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: {stats['potential_income']:,.0f} —Ä—É–±

_–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}_
"""
    
    await update.message.reply_text(
        message,
        parse_mode="Markdown",
        reply_markup=admin_keyboard()
    )
    
    return ADMIN_PANEL

# ===== –ò–ò-–§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–î–ú–ò–ù–û–í =====

async def start_document_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    if not is_admin(update.effective_user.id):
        return MAIN_MENU
    
    await update.message.reply_text(
        "üìÑ **–ê–ù–ê–õ–ò–ó –î–û–ö–£–ú–ï–ù–¢–û–í –° –ò–ò**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (—Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
        "–ò–ò –≤—ã—è–≤–∏—Ç:\n"
        "‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —É—Å–ª–æ–≤–∏—è\n"
        "‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏\n"
        "‚Ä¢ –°–ø–æ—Ä–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã\n"
        "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: TXT, PDF (–∫–∞–∫ —Ç–µ–∫—Å—Ç)\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove()
    )
    
    return ADMIN_DOCUMENTS

async def handle_document_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    
    if update.message.text and update.message.text.lower() == '/cancel':
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_keyboard())
        return ADMIN_PANEL
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    processing_msg = await update.message.reply_text("üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç...")
    
    try:
        document_text = ""
        
        # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç
        if update.message.document:
            file = await context.bot.get_file(update.message.document.file_id)
            file_bytes = await file.download_as_bytearray()
            
            try:
                document_text = file_bytes.decode('utf-8')
            except:
                document_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ TXT —Ñ–∞–π–ª."
        # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–Ω —Ç–µ–∫—Å—Ç
        elif update.message.text:
            document_text = update.message.text
        
        if document_text and document_text != "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ TXT —Ñ–∞–π–ª.":
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò
            analysis = await analyze_document_with_ai(document_text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –ë–î
            user_id = update.effective_user.id
            save_document_analysis(user_id, "user_document", analysis)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                await processing_msg.delete()
            except Exception:
                pass
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await update.message.reply_text(
                f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:\n\n{analysis}",
                parse_mode="Markdown"
            )
        else:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                await processing_msg.delete()
            except Exception:
                pass
                
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ TXT."
            )
        
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ADMIN_DOCUMENTS
        
    except Exception as e:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await processing_msg.delete()
        except Exception:
            pass
            
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}",
            reply_markup=admin_keyboard()
        )
        return ADMIN_PANEL

async def start_contract_generation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–æ–≥–æ–≤–æ—Ä–∞."""
    if not is_admin(update.effective_user.id):
        return MAIN_MENU
    
    await update.message.reply_text(
        "‚úçÔ∏è **–ì–ï–ù–ï–†–ê–¢–û–† –î–û–ì–û–í–û–†–û–í**\n\n"
        "–û–ø–∏—à–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–≥–æ–≤–æ—Ä–∞:\n"
        "‚Ä¢ –¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞\n"
        "‚Ä¢ –°—Ç–æ—Ä–æ–Ω—ã\n"
        "‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞\n"
        "‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "_–î–æ–≥–æ–≤–æ—Ä –æ–∫–∞–∑–∞–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥ –º–µ–∂–¥—É –ò–ü –ò–≤–∞–Ω–æ–≤ –∏ —Ñ–∏–∑–ª–∏—Ü–æ–º –ü–µ—Ç—Ä–æ–≤—ã–º. "
        "–£—Å–ª—É–≥–∏ –ø–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤—É. –°—Ç–æ–∏–º–æ—Å—Ç—å 50000 —Ä—É–±, –æ–ø–ª–∞—Ç–∞ 50% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞._\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove()
    )
    
    return ADMIN_CONTRACT

async def handle_contract_generation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–æ–≥–æ–≤–æ—Ä–∞."""
    params = update.message.text
    
    if params.lower() == '/cancel':
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_keyboard())
        return ADMIN_PANEL
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    processing_msg = await update.message.reply_text("‚úçÔ∏è –°–æ—Å—Ç–∞–≤–ª—è—é –¥–æ–≥–æ–≤–æ—Ä...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–≥–æ–≤–æ—Ä –æ—Ç –ò–ò
        contract = await generate_contract_with_ai(params)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await processing_msg.delete()
        except Exception:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.message.reply_text(
            f"üìÑ –î–æ–≥–æ–≤–æ—Ä:\n\n{contract}",
            parse_mode="Markdown"
        )
        
        await update.message.reply_text(
            "–û–ø–∏—à–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ADMIN_CONTRACT
        
    except Exception as e:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await processing_msg.delete()
        except Exception:
            pass
            
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}",
            reply_markup=admin_keyboard()
        )
        return ADMIN_PANEL

async def start_legal_research(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏."""
    if not is_admin(update.effective_user.id):
        return MAIN_MENU
    
    await update.message.reply_text(
        "üîç **–ü–û–ò–°–ö –°–£–î–ï–ë–ù–û–ô –ü–†–ê–ö–¢–ò–ö–ò**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
        "‚Ä¢ –¢–µ–º—É –∏–ª–∏ –ø—Ä–∞–≤–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å\n"
        "‚Ä¢ –°—Ç–∞—Ç—å—é –∑–∞–∫–æ–Ω–∞\n"
        "‚Ä¢ –¢–∏–ø —Å–ø–æ—Ä–∞\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "_- –í–∑—ã—Å–∫–∞–Ω–∏–µ –Ω–µ—É—Å—Ç–æ–π–∫–∏ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É –ø–æ—Å—Ç–∞–≤–∫–∏_\n"
        "_- –ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —Ñ–∏–∑–ª–∏—Ü –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∂–∏–ª—å–µ_\n"
        "_- –û—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –¥–æ–ª–∂–Ω–∏–∫–∞_\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove()
    )
    
    return ADMIN_RESEARCH

async def handle_legal_research(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏."""
    query = update.message.text
    
    if query.lower() == '/cancel':
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_keyboard())
        return ADMIN_PANEL
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    processing_msg = await update.message.reply_text("üîç –ò—â—É —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò
        result = await legal_research_with_ai(query)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await processing_msg.delete()
        except Exception:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.message.reply_text(
            f"üìö –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:\n\n{result}",
            parse_mode="Markdown"
        )
        
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardRemove()
        )  # <-- –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –±—ã–ª–∞ –æ–±—Ä–µ–∑–∞–Ω–∞ —É –≤–∞—Å
        return ADMIN_RESEARCH
        
    except Exception as e:  # <-- –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∞—Å—Ç—å—é –æ—Å–Ω–æ–≤–Ω–æ–≥–æ try –±–ª–æ–∫–∞
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await processing_msg.delete()
        except Exception:
            pass
            
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}",
            reply_markup=admin_keyboard()
        )
        return ADMIN_PANEL

async def start_risk_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤."""
    if not is_admin(update.effective_user.id):
        return MAIN_MENU
    
    await update.message.reply_text(
        "‚ö†Ô∏è **–ê–ù–ê–õ–ò–ó –ü–†–ê–í–û–í–´–• –†–ò–°–ö–û–í**\n\n"
        "–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n"
        "‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–µ–º—É—é —Å–¥–µ–ª–∫—É\n"
        "‚Ä¢ –°–ø–æ—Ä–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é\n"
        "‚Ä¢ –ü—Ä–∞–≤–æ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É\n\n"
        "–ò–ò –æ—Ü–µ–Ω–∏—Ç:\n"
        "‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω—ã–µ —Ä–∏—Å–∫–∏\n"
        "‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è\n"
        "‚Ä¢ –°–ø–æ—Å–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏\n"
        "‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove()
    )
    
    return ADMIN_RISK_ANALYSIS


async def handle_risk_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤."""
    situation = update.message.text
    
    if situation.lower() == '/cancel':
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_keyboard())
        return ADMIN_PANEL
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    processing_msg = await update.message.reply_text("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∏—Å–∫–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò
        analysis = await analyze_risks_with_ai(situation)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await processing_msg.delete()
        except Exception:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.message.reply_text(
            f"‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤:\n\n{analysis}",
            parse_mode="Markdown"
        )
        
        await update.message.reply_text(
            "–û–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ADMIN_RISK_ANALYSIS
        
    except Exception as e:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await processing_msg.delete()
        except Exception:
            pass
            
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}",
            reply_markup=admin_keyboard()
        )
        return ADMIN_PANEL

async def start_financial_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑."""
    if not is_admin(update.effective_user.id):
        return MAIN_MENU
    
    await update.message.reply_text(
        "üíº **–§–ò–ù–ê–ù–°–û–í–´–ô –ê–ù–ê–õ–ò–ó**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:\n\n"
        "1Ô∏è‚É£ **–ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö** - –∞–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        "2Ô∏è‚É£ **–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö** - –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "‚Ä¢ `1` –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ë–î\n"
        "‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ:\n\n"
        "_–ü—Ä–∏–º–µ—Ä:_\n"
        "```\n"
        "–î–æ—Ö–æ–¥: 50000 —Ä—É–±/–º–µ—Å\n"
        "–î–æ–ª–≥–∏: 500000 —Ä—É–±\n"
        "–ö—Ä–µ–¥–∏—Ç—ã: 25000 —Ä—É–±/–º–µ—Å\n"
        "–†–∞—Å—Ö–æ–¥—ã: 45000 —Ä—É–±/–º–µ—Å\n"
        "```\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove()
    )
    
    return ADMIN_FINANCIAL

async def handle_financial_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑."""
    text = update.message.text.strip()
    
    if text.lower() == '/cancel':
        await update.message.reply_text("‚ùå –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=admin_keyboard())
        return ADMIN_PANEL
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    processing_msg = await update.message.reply_text("üíº –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    
    try:
        financial_data = ""
        
        if text == "1":
            # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
            stats = get_statistics()
            
            financial_data = f"""
–ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:

–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
- –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats['total_clients']}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (30 –¥–Ω–µ–π): {stats['active_clients']}

–ó–∞—è–≤–∫–∏:
- –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏: {stats['new_requests']}
- –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}
- –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: {stats['completed']}
- –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total_requests']}

–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
- –û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats['total_debt']:,.0f} —Ä—É–±
- –°—Ä–µ–¥–Ω–∏–π –¥–æ–ª–≥ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: {stats['avg_debt']:,.0f} —Ä—É–±
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç —É—Å–ª—É–≥: {stats['potential_income']:,.0f} —Ä—É–±

–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:
- –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {stats['scheduled']}
- –ü—Ä–æ–≤–µ–¥–µ–Ω–æ: {stats['completed_appointments']}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥ –ø–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤—É.
"""
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω—ã–µ
            financial_data = f"""
–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:

{text}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞.
–û—Ü–µ–Ω–∏ –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò
        analysis = await analyze_financial_documents(financial_data)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        try:
            await processing_msg.delete()
        except Exception:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.message.reply_text(
            f"üíº **–†–ï–ó–£–õ–¨–¢–ê–¢ –§–ò–ù–ê–ù–°–û–í–û–ì–û –ê–ù–ê–õ–ò–ó–ê**\n\n{analysis}",
            parse_mode="Markdown"
        )
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è
        keyboard = [
            ["üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", "üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=reply_markup
        )
        
        return ADMIN_FINANCIAL
        
    except Exception as e:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        try:
            await processing_msg.delete()
        except Exception:
            pass
            
        await update.message.reply_text(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:**\n\n{str(e)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            parse_mode="Markdown",
            reply_markup=admin_keyboard()
        )
        return ADMIN_PANEL

async def handle_financial_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ —Ä–µ–∂–∏–º–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
    text = update.message.text
    
    if text == "üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑":
        return await start_financial_analysis(update, context)
    elif text == "üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.",
            reply_markup=admin_keyboard()
        )
        return ADMIN_PANEL
    else:
        # –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        return await handle_financial_analysis(update, context)


    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    processing_msg = await update.message.reply_text("üíº –ü—Ä–æ–≤–æ–∂—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑...")
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        stats = get_statistics()
        
        financial_data = f"""
        –û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats['total_debt']:,.0f} —Ä—É–±
        –°—Ä–µ–¥–Ω–∏–π –¥–æ–ª–≥: {stats['avg_debt']:,.0f} —Ä—É–±
        –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–µ–ª: {stats['completed']}
        –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}
        """
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò
        analysis = await analyze_financial_documents(financial_data)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await processing_msg.delete()
        except Exception:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.message.reply_text(
            f"üíº –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑:\n\n{analysis}",
            parse_mode="Markdown",
            reply_markup=admin_keyboard()
        )
        
    except Exception as e:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await processing_msg.delete()
        except Exception:
            pass
            
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}",
            reply_markup=admin_keyboard()
        )
    
    return ADMIN_PANEL

async def data_protection_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—â–∏—Ç–µ –¥–∞–Ω–Ω—ã—Ö."""
    if not is_admin(update.effective_user.id):
        return MAIN_MENU
    
    message = """
üîê **–ó–ê–©–ò–¢–ê –î–ê–ù–ù–´–•**

**–ú–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:**
‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –≤ SQLite
‚úÖ –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Ç–æ–ª—å–∫–æ –ø–æ ID
‚úÖ API –∫–ª—é—á–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
‚úÖ –õ–æ–≥–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –¥–µ–ª–∞–π—Ç–µ –±—ç–∫–∞–ø –ë–î
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ

**–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ 152-–§–ó:**
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –•—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–§
‚Ä¢ –û–±–µ—Å–ø–µ—á—å—Ç–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ –í–µ–¥–∏—Ç–µ –∂—É—Ä–Ω–∞–ª –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –¥–∞–Ω–Ω—ã–º

**–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞:**
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é export_client_data(user_id) –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

**–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:**
–ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–ª–∏–µ–Ω—Ç–∞ —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –ë–î.
"""
    
    await update.message.reply_text(
        message,
        parse_mode="Markdown",
        reply_markup=admin_keyboard()
    )
    
    return ADMIN_PANEL

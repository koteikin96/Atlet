from telegram import Update, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from keyboards import main_keyboard
from states import MAIN_MENU, CALCULATOR_DEBT, CALCULATOR_INCOME, CONTACT_INFO, AI_CHAT

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text in ["üìã –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ–ª–≥–∞"]:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –≤–∞—à–∏—Ö –¥–æ–ª–≥–æ–≤ (–≤ —Ä—É–±–ª—è—Ö):", reply_markup=ReplyKeyboardRemove())
        return CALCULATOR_DEBT
    elif text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())
        return CONTACT_INFO
    elif text == "ü§ñ –í–æ–ø—Ä–æ—Å –ò–ò-—é—Ä–∏—Å—Ç—É":
        await update.message.reply_text("–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ò–ò-—é—Ä–∏—Å—Ç—É:\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞?\n‚Ä¢ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä–∞?\n‚Ä¢ –ß—Ç–æ –±—É–¥–µ—Ç —Å –º–æ–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–æ–π?", reply_markup=ReplyKeyboardRemove())
        return AI_CHAT
    elif text == "‚ÑπÔ∏è –û –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ":
        await update.message.reply_text("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ\nü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI: –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –æ—Ü–µ–Ω–∫–∞ —à–∞–Ω—Å–æ–≤", reply_markup=main_keyboard())
        return MAIN_MENU

async def handle_debt_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        debt_amount = float(update.message.text.replace(' ', '').replace(',', '.'))
        context.user_data['debt_amount'] = debt_amount
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ (–≤ —Ä—É–±–ª—è—Ö):")
        return CALCULATOR_INCOME
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏.")
        return CALCULATOR_DEBT

async def handle_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        income = float(update.message.text.replace(' ', '').replace(',', '.'))
        context.user_data['income_amount'] = income
        debt = context.user_data.get('debt_amount', 0)
        ratio = debt / (income * 12) if income > 0 else float('inf')
        if ratio > 5:
            situation = "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è"
            recommendation = "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"
        elif 3 <= ratio <= 5:
            situation = "—Ç—è–∂–µ–ª–∞—è"
            recommendation = "–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è"
        else:
            situation = "—É–ø—Ä–∞–≤–ª—è–µ–º–∞—è"
            recommendation = "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é –¥–æ–ª–≥–æ–≤"
        analysis = f"üìà –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:\n–î–æ–ª–≥: {debt:.0f} —Ä—É–±.\n–î–æ—Ö–æ–¥: {income:.0f} —Ä—É–±.\n–°–∏—Ç—É–∞—Ü–∏—è: {situation}\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}"
        await update.message.reply_text(analysis, reply_markup=main_keyboard())
        return MAIN_MENU
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏.")
        return CALCULATOR_INCOME

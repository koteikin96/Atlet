import datetime
from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

def main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ—Ç–∞."""
    keyboard = [
        [KeyboardButton("üìã –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"), KeyboardButton("üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ–ª–≥–∞")],
        [KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º"), KeyboardButton("‚ÑπÔ∏è –û –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ")],
        [KeyboardButton("ü§ñ –í–æ–ø—Ä–æ—Å –ò–ò-—é—Ä–∏—Å—Ç—É"), KeyboardButton("üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    keyboard = [
        [KeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏")],
        [KeyboardButton("üìù –ó–∞–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def income_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ—Ö–æ–¥–∞."""
    keyboard = [
        [KeyboardButton("–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥")],
        [KeyboardButton("–ù–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥")],
        [KeyboardButton("–ù–µ —Ä–∞–±–æ—Ç–∞—é")],
        [KeyboardButton("–û—Ç–º–µ–Ω–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def requests_keyboard(requests):
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞—è–≤–æ–∫."""
    keyboard = []
    
    status_emoji = {
        'new': 'üÜï',
        'in_progress': '‚è≥',
        'completed': '‚úÖ',
        'rejected': '‚ùå'
    }
    
    for req in requests[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –∑–∞—è–≤–æ–∫
        request_id = req[0]
        client_name = req[3]
        status = req[9]
        emoji = status_emoji.get(status, '‚ùì')
        
        button_text = f"{emoji} #{request_id}: {client_name[:20]}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"view_request_{request_id}")])
    
    return InlineKeyboardMarkup(keyboard)

def request_status_keyboard(request_id):
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏."""
    keyboard = [
        [InlineKeyboardButton("‚è≥ –í —Ä–∞–±–æ—Ç–µ", callback_data=f"status_in_progress_{request_id}")],
        [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞", callback_data=f"status_completed_{request_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞", callback_data=f"status_rejected_{request_id}")],
        [InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_requests")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_calendar(year, month):
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º."""
    keyboard = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    months = {
        1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
        5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
        9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
    }
    header = [InlineKeyboardButton(f"{months[month]} {year}", callback_data="ignore")]
    keyboard.append(header)
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append([InlineKeyboardButton(day, callback_data="ignore") for day in weekdays])
    
    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    import calendar as cal
    month_calendar = cal.monthcalendar(year, month)
    today = datetime.date.today()
    
    for week in month_calendar:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                date = datetime.date(year, month, day)
                if date < today:
                    # –ü—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã
                    row.append(InlineKeyboardButton(f"‚úñÔ∏è{day}", callback_data="ignore"))
                elif date == today:
                    # –°–µ–≥–æ–¥–Ω—è –≤—ã–¥–µ–ª—è–µ–º
                    row.append(InlineKeyboardButton(f"üìç{day}", callback_data=f"calendar_day_{date.isoformat()}"))
                else:
                    # –ë—É–¥—É—â–∏–µ –¥–∞—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã
                    row.append(InlineKeyboardButton(str(day), callback_data=f"calendar_day_{date.isoformat()}"))
        keyboard.append(row)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    nav_row = []
    if month > 1:
        nav_row.append(InlineKeyboardButton("<<", callback_data=f"calendar_nav_{year}_{month-1}"))
    else:
        nav_row.append(InlineKeyboardButton("<<", callback_data=f"calendar_nav_{year-1}_12"))
    
    if month < 12:
        nav_row.append(InlineKeyboardButton(">>", callback_data=f"calendar_nav_{year}_{month+1}"))
    else:
        nav_row.append(InlineKeyboardButton(">>", callback_data=f"calendar_nav_{year+1}_1"))
    
    keyboard.append(nav_row)
    
    # –î–û–ë–ê–í–õ–Ø–ï–ú –ö–ù–û–ü–ö–£ –û–¢–ú–ï–ù–´
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_calendar")])
    
    return InlineKeyboardMarkup(keyboard)

def create_time_slots_keyboard(slots):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏."""
    keyboard = []
    for slot in slots:
        keyboard.append([InlineKeyboardButton(slot, callback_data=f"time_slot_{slot}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="back_to_calendar")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_calendar")])
    
    return InlineKeyboardMarkup(keyboard)

def create_time_slots_keyboard_with_status(available_slots, booked_times):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∑–∞–Ω—è—Ç—ã—Ö"""
    keyboard = []
    for slot in available_slots:
        if slot in booked_times:
            # –ó–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è - –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
            keyboard.append([InlineKeyboardButton(f"‚ùå {slot} (–∑–∞–Ω—è—Ç–æ)", callback_data=f"occupied_{slot}")])
        else:
            # –°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
            keyboard.append([InlineKeyboardButton(f"‚úÖ {slot}", callback_data=f"time_slot_{slot}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="back_to_calendar")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_calendar")])
    
    return InlineKeyboardMarkup(keyboard)
